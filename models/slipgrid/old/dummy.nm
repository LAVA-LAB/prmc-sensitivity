dtmc

const double v1;
const double v2;
const double v3;
const double v4;
const double v5;

 module grid
    x : [0..4] init 0;
    y : [0..4] init 0;
    z : [0..1] init 0;
    [step] (x=0) & (y=0) & (z=0) -> 1-v1: (x'=x+1) & (y'=y) & (z'=z) + v1: (x'=x) & (y'=y) & (z'=z);
    [step] (x=1) & (y=0) & (z=0) -> 1-v1: (x'=x) & (y'=y+1) & (z'=z) + v1: (x'=x) & (y'=y) & (z'=z);
    [step] (x=2) & (y=0) & (z=0) -> 1-v3: (x'=x) & (y'=y+1) & (z'=z) + v3: (x'=x) & (y'=y) & (z'=z);
    [step] (x=3) & (y=0) & (z=0) -> 1-v3: (x'=x) & (y'=y+1) & (z'=z) + v3: (x'=x) & (y'=y) & (z'=z);
    [step] (x=4) & (y=0) & (z=0) -> 1-v3: (x'=x) & (y'=y+1) & (z'=z+1) + v3: (x'=x) & (y'=y) & (z'=z);
    [step] (x=0) & (y=1) & (z=0) -> 1-v2: (x'=x+1) & (y'=y) & (z'=z) + v2: (x'=x) & (y'=y) & (z'=z);
    [step] (x=1) & (y=1) & (z=0) -> 1-v1: (x'=x) & (y'=y+1) & (z'=z) + v1: (x'=x) & (y'=y) & (z'=z);
    [step] (x=2) & (y=1) & (z=0) -> 1-v3: (x'=x) & (y'=y+1) & (z'=z) + v3: (x'=x) & (y'=y) & (z'=z);
    [step] (x=3) & (y=1) & (z=0) -> 1-v3: (x'=x+1) & (y'=y) & (z'=z+1) + v3: (x'=x) & (y'=y) & (z'=z);
    [step] (x=4) & (y=1) & (z=0) -> 1-v4: (x'=x) & (y'=y+1) & (z'=z) + v4: (x'=x) & (y'=y) & (z'=z);
    [step] (x=0) & (y=2) & (z=0) -> 1-v2: (x'=x+1) & (y'=y) & (z'=z) + v2: (x'=x) & (y'=y) & (z'=z);
    [step] (x=1) & (y=2) & (z=0) -> 1-v1: (x'=x+1) & (y'=y) & (z'=z) + v1: (x'=x) & (y'=y) & (z'=z);
    [step] (x=2) & (y=2) & (z=0) -> 1-v4: (x'=x+1) & (y'=y) & (z'=z) + v4: (x'=x) & (y'=y) & (z'=z);
    [step] (x=3) & (y=2) & (z=0) -> 1-v4: (x'=x+1) & (y'=y) & (z'=z) + v4: (x'=x) & (y'=y) & (z'=z);
    [step] (x=4) & (y=2) & (z=0) -> 1-v4: (x'=x) & (y'=y-1) & (z'=z+1) + v4: (x'=x) & (y'=y) & (z'=z);
    [step] (x=0) & (y=3) & (z=0) -> 1-v2: (x'=x+1) & (y'=y) & (z'=z) + v2: (x'=x) & (y'=y) & (z'=z);
    [step] (x=1) & (y=3) & (z=0) -> 1-v2: (x'=x) & (y'=y-1) & (z'=z) + v2: (x'=x) & (y'=y) & (z'=z);
    [step] (x=2) & (y=3) & (z=0) -> 1-v2: (x'=x) & (y'=y-1) & (z'=z) + v2: (x'=x) & (y'=y) & (z'=z);
    [step] (x=3) & (y=3) & (z=0) -> 1-v5: (x'=x) & (y'=y-1) & (z'=z) + v5: (x'=x) & (y'=y) & (z'=z);
    [step] (x=4) & (y=3) & (z=0) -> 1-v5: (x'=x) & (y'=y-1) & (z'=z) + v5: (x'=x) & (y'=y) & (z'=z);
    [step] (x=0) & (y=4) & (z=0) -> 1-v2: (x'=x+1) & (y'=y) & (z'=z) + v2: (x'=x) & (y'=y) & (z'=z);
    [step] (x=1) & (y=4) & (z=0) -> 1-v2: (x'=x) & (y'=y-1) & (z'=z) + v2: (x'=x) & (y'=y) & (z'=z);
    [step] (x=2) & (y=4) & (z=0) -> 1-v2: (x'=x) & (y'=y-1) & (z'=z) + v2: (x'=x) & (y'=y) & (z'=z);
    [step] (x=3) & (y=4) & (z=0) -> 1-v5: (x'=x) & (y'=y-1) & (z'=z) + v5: (x'=x) & (y'=y) & (z'=z);
    [step] (x=4) & (y=4) & (z=0) -> 1-v5: (x'=x) & (y'=y-1) & (z'=z) + v5: (x'=x) & (y'=y) & (z'=z);
    [step] (x=0) & (y=0) & (z=1) -> 1-v1: (x'=x+1) & (y'=y) & (z'=z) + v1: (x'=x) & (y'=y) & (z'=z);
    [step] (x=1) & (y=0) & (z=1) -> 1-v1: (x'=x) & (y'=y+1) & (z'=z) + v1: (x'=x) & (y'=y) & (z'=z);
    [step] (x=2) & (y=0) & (z=1) -> 1-v3: (x'=x) & (y'=y+1) & (z'=z) + v3: (x'=x) & (y'=y) & (z'=z);
    [step] (x=3) & (y=0) & (z=1) -> 1-v3: (x'=x) & (y'=y+1) & (z'=z) + v3: (x'=x) & (y'=y) & (z'=z);
    [step] (x=4) & (y=0) & (z=1) -> 1-v3: (x'=x) & (y'=y+1) & (z'=z) + v3: (x'=x) & (y'=y) & (z'=z);
    [step] (x=0) & (y=1) & (z=1) -> 1-v2: (x'=x+1) & (y'=y) & (z'=z) + v2: (x'=x) & (y'=y) & (z'=z);
    [step] (x=1) & (y=1) & (z=1) -> 1-v1: (x'=x) & (y'=y+1) & (z'=z) + v1: (x'=x) & (y'=y) & (z'=z);
    [step] (x=2) & (y=1) & (z=1) -> 1-v3: (x'=x) & (y'=y+1) & (z'=z) + v3: (x'=x) & (y'=y) & (z'=z);
    [step] (x=3) & (y=1) & (z=1) -> 1-v3: (x'=x) & (y'=y+1) & (z'=z) + v3: (x'=x) & (y'=y) & (z'=z);
    [step] (x=4) & (y=1) & (z=1) -> 1-v4: (x'=x) & (y'=y+1) & (z'=z) + v4: (x'=x) & (y'=y) & (z'=z);
    [step] (x=0) & (y=2) & (z=1) -> 1-v2: (x'=x+1) & (y'=y) & (z'=z) + v2: (x'=x) & (y'=y) & (z'=z);
    [step] (x=1) & (y=2) & (z=1) -> 1-v1: (x'=x+1) & (y'=y) & (z'=z) + v1: (x'=x) & (y'=y) & (z'=z);
    [step] (x=2) & (y=2) & (z=1) -> 1-v4: (x'=x) & (y'=y+1) & (z'=z) + v4: (x'=x) & (y'=y) & (z'=z);
    [step] (x=3) & (y=2) & (z=1) -> 1-v4: (x'=x) & (y'=y+1) & (z'=z) + v4: (x'=x) & (y'=y) & (z'=z);
    [step] (x=4) & (y=2) & (z=1) -> 1-v4: (x'=x) & (y'=y+1) & (z'=z) + v4: (x'=x) & (y'=y) & (z'=z);
    [step] (x=0) & (y=3) & (z=1) -> 1-v2: (x'=x+1) & (y'=y) & (z'=z) + v2: (x'=x) & (y'=y) & (z'=z);
    [step] (x=1) & (y=3) & (z=1) -> 1-v2: (x'=x) & (y'=y+1) & (z'=z) + v2: (x'=x) & (y'=y) & (z'=z);
    [step] (x=2) & (y=3) & (z=1) -> 1-v2: (x'=x) & (y'=y+1) & (z'=z) + v2: (x'=x) & (y'=y) & (z'=z);
    [step] (x=3) & (y=3) & (z=1) -> 1-v5: (x'=x) & (y'=y+1) & (z'=z) + v5: (x'=x) & (y'=y) & (z'=z);
    [step] (x=4) & (y=3) & (z=1) -> 1-v5: (x'=x) & (y'=y+1) & (z'=z) + v5: (x'=x) & (y'=y) & (z'=z);
    [step] (x=0) & (y=4) & (z=1) -> 1-v2: (x'=x+1) & (y'=y) & (z'=z) + v2: (x'=x) & (y'=y) & (z'=z);
    [step] (x=1) & (y=4) & (z=1) -> 1: (x'=x) & (y'=y) & (z'=z);
    [step] (x=2) & (y=4) & (z=1) -> 1-v2: (x'=x-1) & (y'=y) & (z'=z) + v2: (x'=x) & (y'=y) & (z'=z);
    [step] (x=3) & (y=4) & (z=1) -> 1-v5: (x'=x-1) & (y'=y) & (z'=z) + v5: (x'=x) & (y'=y) & (z'=z);
    [step] (x=4) & (y=4) & (z=1) -> 1-v5: (x'=x-1) & (y'=y) & (z'=z) + v5: (x'=x) & (y'=y) & (z'=z);
endmodule

// reward structure (number of steps to reach the target)
rewards
    [step] true : 1;
endrewards

label "goal" = x=1 & y=4 & z=1;